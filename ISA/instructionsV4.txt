16-bit instruction size
======================================================================================
R_type
------	//handling the shifting will be in the decoder by making sign extend
opcode 	-> 4 bits
Rd     	-> 3 bits
Rs     	-> 3 bits
shmt   	-> 4 bits (higher 3 bits for Rdst2 in case of MUL)
funct  	-> 2 bits

b_type
------
opcode 	-> 4 bits 
Rdst	-> 3 bits
7 bits for future development
funct 	-> 2 bits

c_type
------
opcode	-> 4 bits
OP 	-> 1 bit
9 bits for future development
funct	-> 2 bits

s_type
------
opcode	-> 4 bits
Rdst	-> 3 bits
PC	-> 1 bit
flags	-> 1 bit
5 bits reserved for future development
funct 	-> 2 bits

m_type
------
opcode	-> 4 bits
Rdst	-> 3 bits
Rsrc	-> 3 bits
port	-> 4 bits
funct	-> 2 bits

I_type
------
opcode 	-> 4 bits
Rdst    -> 3 bits
9 bits for future development
Immed	-> 16 bits (next line)

======================================================================================
opcodes : 0 -> (NOP) , 9 -> (CLR_FLAGS) , 1:3 -> (R-types)  , 4 -> (b-type), 5 -> (c-type), 6 -> (s-type), 7 -> (m_type) , 8 -> (I-types) 


R-type	
------
group0	: 1 (op-code)
============
-> DIV 		-> 0 (funct)
-> MUL 		-> 1 (funct)
-> ADD 		-> 2 (funct)
-> SUB 		-> 3 (funct)

group1	: 2 (op-code)
============
-> SHL 		-> 0 (funct)
-> SHR 		-> 1 (funct)
-> INC 		-> 2 (funct)
-> DEC 		-> 3 (funct)

group2	: 3 (op-code)
============
-> OR  		-> 0 (funct)
-> AND 		-> 1 (funct)
-> NOT 		-> 2 (funct)
-> MOV 		-> 3 (funct)

group3	: 12 (op-code)
============
-> MOD  		-> 0 (funct)



b_type	: 4 (op-code)
------
-> JZ  		-> 0 (funct)
-> JN  		-> 1 (funct)
-> JC  		-> 2 (funct)
-> JMP 		-> 3 (funct)

c_type	: 5 (op-code)
------
group0 : OP	-> 0	(clear)
-> CLRZ	-> 0	 (funct)
-> CLRN 	-> 1	 (funct)
-> CLRC	-> 2 	 (funct)
-> CLROVF	-> 3	 (funct)

group1 : OP	-> 1	(set)
-> SETZ	-> 0	 (funct)
-> SETN 	-> 1	 (funct)
-> SETC	-> 2	 (funct)
-> SETOVF	-> 3	 (funct)


s_type : 6 (op-code)
------
-> PUSH		-> 0	(funct)
-> POP		-> 1	(funct)


m_type : 7 (op-code)
------
-> OUT	-> 0 (funct)		-> Rdst, port
-> IN		-> 1 (funct)		
-> LDD	-> 2 (funct)		-> Rdst, Rsrc
-> STD	-> 3 (funct)	


I_type : 8 (op-code)
------
-> LDM		-> 0 (funct)		-> Rdst, immediate value
-> CALL #imm	-> 1 (funct)		-> '#imm' + 'immediate value'
-> JMP  #imm	-> 2 (funct)		-> '#imm' + 'immediate value'
-> JC   #imm	-> 3 (funct)		-> '#imm' + 'immediate value'
-> JN   #imm	-> 4 (funct)		-> '#imm' + 'immediate value'
-> JZ   #imm	-> 5 (funct)		-> '#imm' + 'immediate value'


n_type
------
-> CLR_FLAGS : 9 (op-code)
-> NOP 	: 0 (op-code)	
-> CALL  : 10 (op-code)
-> SETINT	: 11 (op-code)
-> RST	; 13 (op-code)

=> number 13-> 15 are left for future development


======================================================================================

instructions to be handled by assembler:
-> RET   	: POP PC

-> RTI   	: POP PC, flags

//-> Reset 	: load PC, 2^5
	   	  reset hardware		-> commented
			

//-> interrupt	: push PC,flags	-> commented

		  
//-> CALL 	: PUSH PC
		  JMP Rdst			-> commented
	 
HAZARDS types:	- LDD,OUT then R_type iunstrcution or b_type instruction

======================================================================================

bonus:
------
-> many new instructions like MUL and DIV, JMP #imm , POP PC, flags , etc....
-> jumping on labels and functions
-> more than one port (immediate is 4 bits)
-> EPC
-> CALL #imm
   JMP  #imm
   JC,KN,JZ #immm
-> reset the data memory
-> 2 forwarding units (extra one is to make MEM-MEM forwarding for common cases like copying elements of array from one place to another)
-> exception unit:
	-> stack overflow and underflow (SP)
	-> invalid instruction (instruction op code > 10)
	-> division by zero
	-> out of memory bounds in instruction and data memory
	=> saves the adddress of PC in EPC and cause will hold the exception number
-> handling the state when writing the result of multiplication to 2 registers and theses registers are same so we give priority to the one who stores the lower 16 bits
	
=====================================================================================
Notes:
	-> assembler should use Rdst as the the target register while Rsrc as the memory address in STD and LDD commands
	-> assembler should replace RET, RTI with their equivalent commands
	-> assembler should map the addresses of the ports to their real addresses
	-> assembler should detect invalid instructions
	-> reset before interrupt if both happened at the same time
	-> for reset signal, it has to be stable for at least 1 clock cycle
	-> when flushing, we clear all the registers except for INT signal and PC
=====================================================================================
TODO:
	-> when doing jmp then reset, the jmp instruction will flush the int signal
 	-> make reset aysnchronous and flush synchronous
	-> complete interrupt design
	-> CLR_FLAGs and CLR_interrupt should execute same as RTI
	-> CLR_INT (will be discussed with hany)
	-> forward the port memory also in the case of (IN Rdst,Port then out Rdst, port)
	-> reset is asynchronous with clock
	-> make memory for data and in ports
	-> solve the problems related to INT 
	-> add the overflow flag
=====================================================================================
CAUSE valus:
	->	0	:	no error
	->	1	:	stack overflow		(mem stage)
	->	2	:	stack underflow		(mem stage)
	->	3	:	invalid instruction	(decode stage)
	->	4	:	Division by zero		(ex stage)
	->	5	:	out of memory boundries in instruction memory (ex stage)
	->	6	:	out of memory boundries in data memory	(mem stage)

PC_src for EPC:
	-> 	0	:	0
	->	1	:	PC from decode stage
	->	2	:	PC from execution stage
	->	3	:	PC from mem stage
=====================================================================================
tesetcases:	
	-> fibanocci series
	->
